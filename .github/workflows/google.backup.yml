# 部署去 GKE

# This workflow will build a docker container, publish it to Google Container
# Registry, and deploy it to GKE when there is a push to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Google Kubernetes Engine (container.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Ensure that your repository contains the necessary configuration for your
#    Google Kubernetes Engine cluster, including deployment.yml,
#    kustomization.yml, service.yml, etc.
#
# 3. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Kubernetes Engine Developer (roles/container.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 5. Change the values in the "env" block to match your values.

name: "Build and Deploy"

on:
  push:
    branches:
      - '"main"'

env:
  PROJECT_ID: "wade-personal" # TODO: update to your Google Cloud project ID
  REGION: "asia-east1" # 你所在的 GCP 區域
  GAE_APP_NAME: "wade-personal-blog" # 請更改為你的 GAE 應用名稱
  WORKLOAD_IDENTITY_PROVIDER: "projects/684523256629/locations/global/workloadIdentityPools/github-pool/subject/SUBJECT_ATTRIBUTE_VALUE"
  # principal://iam.googleapis.com/projects/684523256629/locations/global/workloadIdentityPools/github-pool/subject/SUBJECT_ATTRIBUTE_VALUE
  # GAR_LOCATION: "asia-east1" # TODO: update to your region
  # GKE_CLUSTER: "wade-personal-blog" # TODO: update to your cluster name
  # GKE_ZONE: "UTC" # TODO: update to your cluster zone
  # DEPLOYMENT_NAME: "golden-dream" # TODO: update to your deployment name
  # REPOSITORY: "main" # TODO: update to your Artifact Registry docker repository name
  # IMAGE: "static-site"
jobs:
  deploy:
    name: "Deploy to Google App Engine"
    runs-on: "ubuntu-latest"
    environment: "production" # 如果你想要指定其他環境，可以調整此設定

    steps:
      # Step 1: 檢出程式碼
      - name: "Checkout code"
        uses: actions/checkout@v2

      # 檢查 WORKLOAD_IDENTITY_PROVIDER 是否正確
      - name: "Check Workload Identity Provider"
        run: echo ${{ env.WORKLOAD_IDENTITY_PROVIDER }}

      # Step 2: 設定 Google Cloud 身份驗證
      - name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@latest
        with:
          workload_identity_provider: "${{ env.WORKLOAD_IDENTITY_PROVIDER }}"

      # Step 3: 安裝 Google Cloud SDK
      - name: "Install Google Cloud SDK"
        run: |
          echo "Installing Google Cloud SDK"
          curl -sSL https://sdk.cloud.google.com | bash
          source $HOME/google-cloud-sdk/path.bash.inc

      # Step 4: 設定 GCP 專案
      - name: "Set Google Cloud project"
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud config set compute/region ${{ env.REGION }}

        # gcloud config set app/cloud_storage_bucket "your-bucket"  # 如果有使用 Cloud Storage 的話

      # Step 5: 部署至 Google App Engine
      - name: "Deploy to Google App Engine"
        run: |
          gcloud app deploy --quiet  # --quiet 參數避免需要確認部署

# 部署去 GAE
# jobs:
#   setup-build-publish-deploy:
#     name: "Setup, Build, Publish, and Deploy"
#     runs-on: "ubuntu-latest"
#     environment: "production"

#     permissions:
#       contents: "read"
#       id-token: "write"

#     steps:
#       - name: "Checkout"
#         uses: "actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332" # actions/checkout@v4

#       # Configure Workload Identity Federation and generate an access token.
#       #
#       # See https://github.com/google-github-actions/auth for more options,
#       # including authenticating via a JSON credentials file.
#       - id: "auth"
#         name: "Authenticate to Google Cloud"
#         uses: "google-github-actions/auth@latest
#         with:
#           workload_identity_provider: "${{ env.WORKLOAD_IDENTITY_PROVIDER }}"

#       # Authenticate Docker to Google Cloud Artifact Registry
#       - name: "Docker Auth"
#         uses: "docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567" # docker/login-action@v3
#         with:
#           username: "oauth2accesstoken"
#           password: "${{ steps.auth.outputs.auth_token }}"
#           registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

#       # Get the GKE credentials so we can deploy to the cluster
#       - name: "Set up GKE credentials"
#         uses: "google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116" # google-github-actions/get-gke-credentials@v2
#         with:
#           cluster_name: "${{ env.GKE_CLUSTER }}"
#           location: "${{ env.GKE_ZONE }}"

#       # Build the Docker image
#       - name: "Build and push Docker container"
#         run: |-
#           DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

#           docker build \
#             --tag "${DOCKER_TAG}" \
#             --build-arg GITHUB_SHA="${GITHUB_SHA}" \
#             --build-arg GITHUB_REF="${GITHUB_REF}" \
#             .

#           docker push "${DOCKER_TAG}"

#       # Set up kustomize
#       - name: "Set up Kustomize"
#         run: |-
#           curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
#           chmod u+x ./kustomize

#       # Deploy the Docker image to the GKE cluster
#       - name: "Deploy to GKE"
#         run: |-
#           # replacing the image name in the k8s template
#           ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
#           ./kustomize build . | kubectl apply -f -
#           kubectl rollout status deployment/$DEPLOYMENT_NAME
#           kubectl get services -o wide
